print('--------------------------------------------------------------')
local StarterGui = game:GetService("StarterGui")
local plr = game.Players.LocalPlayer
local _request_ = http_request or request or HttpPost or syn.request
function NOTIFICATION(...)
    game.StarterGui:SetCore("SendNotification", {
    Title = "Masterp Service";
    Text = tostring(...);
    Icon = "rbxassetid://480009377";
    Duration = 5;
    })
end
NOTIFICATION("message: start loger")
NOTIFICATION("message: start system")

print("Account Managers - Loaded - "..math.random(1,999999999999999 ))

_G.Inventory = { 
    ['Alias'] = {"Yama"}, -- Yama, Hallow Scythe, Tushita, Dark Dagger, True Triple Katana, Soul Guitar, Cursed Dual Katana, Shark Anchor
    ['Descriptsion'] = {"Yama"} -- Inventory Descriptsion if emtpy select all
}

local melee_list = {
    'BuySuperhuman',
    'BuyDeathStep',
    'BuySharkmanKarate',
    'BuyElectricClaw',
    'BuyDragonTalon',
    'BuyGodhuman',
    'BuySanguineArt'
}

local alias_list = {
    ['Cursed Dual Katana'] = "CDK",
    ['Shark Anchor'] = "SA",
    ['Soul Guitar'] = "SG",
    ['Dark Dagger'] = "DG",
    ['True Triple Katana'] = "TTK",
    ['Hallow Scythe'] = "HS",
    ['Tushita'] = "TS",
    ['Yama'] = "YA"
}

table_cat = function(a,b)
	return table.concat(a,b) 
end

getgenv().Alias = function(Alias)
	local SetAlias = _request_({
	    Url = 'http://localhost:7963/SetAlias?Account='..plr.Name,
	    Body = tostring(Alias),
	    Method = "POST"
	})
    print(Alias)
	return SetAlias
end

getgenv().Description = function(Description)
	local SetDescription = _request_({
	    Url = 'http://localhost:7963/SetDescription?Account='..plr.Name,
	    Body = tostring(Description),
	    Method = "POST"
	})
    print(Description)
	return SetDescription
end

getgenv().Numbers = function(va)
    local values = {{1000, "K"}, {1000000, "M"}, {1000000000, "B"}}
    local str = ""
    if type(va) ~= "number" then va = tonumber(num) end
    for i = 1, #values do
        if va >= values[i][1] then
            str = (math.floor(va / values[i][1]))..values[i][2]
        end
    end
    return (va < 1000 and va or str)
end

local Level = function()
    local Level = game:GetService("Players").LocalPlayer.PlayerGui.Main.Level
    if string.find(Level.Text,"MAX") then
        return ''
    end
    return Level.Text
end

local MeleeCheck = function(...)
    local ResponeData;
    if #{...} > 1 then
        ResponeData = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(...)
    else
        ResponeData = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(...,true)
    end
    if ResponeData == 1 or ResponeData == 2 then
        return true
    end
    return false
end

local AliasInventory = function()
    local table_inventory = {}
    local remote_inventory = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventory")
    for i, v in pairs(remote_inventory) do
        if v.Type == "Sword" then
            if next(_G.Inventory.Alias) ~= nil then
                for i, vv in pairs(_G.Inventory.Alias) do
                    if string.find(v.Name, vv) then
                        table.insert(table_inventory,alias_list[v.Name])
                    end
                end
            else
                table.insert(table_inventory,alias_list[v.Name])
            end
        end
        if v.Type == "Gun" then
            if next(_G.Inventory.Alias) ~= nil then
                for i, vv in pairs(_G.Inventory.Alias) do
                    if string.find(v.Name, vv) then
                        table.insert(table_inventory,alias_list[v.Name])
                    end
                end
            else
                table.insert(table_inventory,alias_list[v.Name])
            end
        end
    end
    if next(table_inventory) ~= nil then
        return table_cat(Value," + ")
    end
    return "None"
end

local ListMelee = function()
    local val = ""
    local meleecount = 0 
    for _,v in pairs(melee_list) do 
        if MeleeCheck(v) then
            meleecount = meleecount +1
        end
    end
    if meleecount == 6 then
        return "GOD + "
    end
    if meleecount == 7 then
        return "SGA + "
    end
    return ' | „Äî'..meleecount..'/7„Äï | '
end

local ListMaterial = function()
	Material = {}
    for i, v in pairs(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventory")) do
        if v.Type == "Wear" then
            if string.find(v.Name,"Valkyrie Helm") then
                table.insert(Material,"VH")
            end
        end
        if v.Type == "Material" then
            if string.find(v.Name,"Mirror Fractal") then
            	table.insert(Material,"MR")
            end
        end
    end
    if #Material >= 1 then
        return table_cat(Material,'‚Ä¢')
    end
    return ''
end

local LeverCheck = function()
    race = plr.Data.Race.Value
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CheckTempleDoor") then
        return 'üïπÔ∏è | '
    end
    return ''
end
NOTIFICATION("message: 1.1")

local MasteryFruits = function()
    local DataFruits = plr.Data:FindFirstChild("DevilFruit").Value
    if DataFruits ~= nil or DataFruits ~= '' then
        for _i, v in pairs(plr.Character:GetChildren()) do
            if v:IsA("Tool") then
                if v.ToolTip == "Blox Fruit" then
                    return v.Level.Value
                end
            end
            for _i, v in pairs(plr.Backpack:GetChildren()) do
                if v:IsA("Tool") then
                    if v.ToolTip == "Blox Fruit" then
                        return v.Level.Value
                    end
                end
            end
        end
    end
    return 0
end


local Awaken = function()
	Awakened = {}
	if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AwakeningChanger", "Check") then
	    Remote_Awaken = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getAwakenedAbilities")
	    for i, v in pairs(Remote_Awaken) do
	        if v["Key"] then
	            if v["Awakened"] then
	                if i ~= "X" then
	                    table.insert(Awakened, v["Key"])
	                else
	                    table.insert(Awakened, v["Key"])
	                end
	            end
	        end
	    end
	end
	return Awakened
end

local Awaken_Fruit_Mastery = function()
    local NameFruit;
    local skill = 0;
    local Fruit = game:GetService("Players").LocalPlayer.Data:FindFirstChild("DevilFruit").Value
    if string.find(Fruit,"T-Rex") then
        NameFruit = "T-Rex"
    else
        NameFruit = string.gsub(Fruit, "%-%a+", "")
    end
    if NameFruit == nil or NameFruit == '' then NameFruit = 'N/A' end
	if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AwakeningChanger", "Check") then
	    for i, v in pairs(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getAwakenedAbilities")) do
	        skill = skill + 1
	    end
	end
    if tonumber(#Awaken()) == tonumber(skill) and tonumber(skill) ~= 0 then
        return "Full:"..NameFruit..' ('..MasteryFruits()..') '
    end
    if tonumber(#Awaken()) < tonumber(skill) then -- Awaken Not Full
        return "Aw:"..#Awaken()..' '..NameFruit..' ('..MasteryFruits()..') '
    elseif tonumber(#Awaken()) == nil or tonumber(skill) == 0 then
        return NameFruit..' ('..MasteryFruits()..') ' -- Cant or None Awaken 
    end   
end

local MoneyANDFragments = function()
	Beli = getgenv().Numbers(plr.Data.Beli.Value)
	Fragments = getgenv().Numbers(plr.Data.Fragments.Value)
	
	return 'B: '..Beli..' | '..'F: '..Fragments..''
end

local SwordMastery = function()
	SWORD_INVENTORY = {}
    for i,v in pairs(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventory")) do
        if v.Type == "Sword" then
            if v.Name then
                if next(_G.Inventory.Descriptsion) ~= nil then
                    for _,vv in pairs(_G.Inventory.Descriptsion) do 
                        if string.find(v.Name, vv) then
                            table.insert(SWORD_INVENTORY,v.Name.." [Mas."..v.Mastery.."]")
                        end
                    end
                else
                    print("Show All")
                    table.insert(SWORD_INVENTORY,v.Name.." [Mas."..v.Mastery.."]")
                end
            end
        end
    end
    return table_cat(SWORD_INVENTORY,'\n')
end
local Fruits1M = function()
	local FRUITS1M = {}
    for i,v in pairs(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryFruits")) do
        if v.Price >= 1000000 then
            if string.find(v.Name,"T-Rex") then
                table.insert(FRUITS1M,'T-Rex'..'\n')
            else
                local sub = string.gsub(v.Name, "%-%a+", "")
                table.insert(FRUITS1M,sub)
            end
        end
    end
    return table_cat(FRUITS1M,'\n')
end

local RaceANDAwaken = function()
	race = plr.Data.Race.Value
	plr = game.Players.LocalPlayer
    p1 = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Alchemist","1")
    p2 = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Wenlocktoad","1")
    ab = plr.Backpack:FindFirstChild("Awakening") or plr.Character:FindFirstChild("Awakening")
    Gear, Tiers = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("UpgradeRace", "Check")
    
    if Tiers ~= nil or type(Tiers) == number then
        a = Tiers
    else
        a = ''
    end
    if not Tiers ~= nil or not type(Tiers) == number then
        if p1 ==-2 and p2 ~=-2 and tostring(p2) ~= "nil" then
            return ' ‚Ä¢ '..race..' V2'
        elseif p2 ==-2 and p2 ~= nil and not ab then
            return ' ‚Ä¢ '..race..' V3'
        else
            return ' ‚Ä¢ '..race
        end
    end
    return ''
end
NOTIFICATION("message: 1")
task.spawn(function()
    while true do 
        getgenv().Alias(Level()..ListMelee()..AliasInventory()..' | '..ListMaterial())
        getgenv().Description(LeverCheck()..Awaken_Fruit_Mastery()..'‚Ä¢ '..MoneyANDFragments()..RaceANDAwaken()..'   \n------( Sword )------ \n'..SwordMastery()..'\n------( Fruits 1 M )------ \n'..Fruits1M())
    task.wait(5)
    end
end)
NOTIFICATION("message: 2")
print('--------------------------------------------------------------')


-- loadstring(game:HttpGet("https://pastebin.com/raw/5hURdhfn"))()

-- repeat task.wait(2) until game:IsLoaded()
-- _G.Key = 'masterp'
-- _G.Discord = '483969305940328448'
-- getgenv().Loaders = loadstring(game:HttpGet("https://raw.githubusercontent.com/Achitsak/scripts/main/masterp_"))()